#!/bin/bash

BASE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
LOG_FILES_DIR="$BASE_DIR/logs"
UDEV_RULE="/etc/udev/rules.d/99-usb-big-button-arduino-serial.rules"
UDEV_GROUP="arduino-serial"

#-------------------------------------------------------------------------

export UDEV_RULE;
export UDEV_GROUP;

#-------------------------------------------------------------------------

function updateDeviceConf()
{
    local syspath="$1"

    devname="$(udevadm info -q name -p $syspath)"
    if [[ "$devname" == "bus/"* ]]; then
        echo "Invalid device"
        return 
    fi
    eval "$(udevadm info -q property --export -p $syspath)"
    if [[ -z "$ID_SERIAL" ]]; then
        echo "Unsupported device : missing ID_SERIAL"
        return 
    fi
    if [[ -z "$ID_MODEL_ID" ]]; then
        echo "Unsupported device : missing ID_MODEL_ID"
        return 
    fi
    if [[ -z "$ID_VENDOR_ID" ]]; then
        echo "Unsupported device : missing ID_VENDOR_ID"
        return 
    fi
    if [[ -z "$SUBSYSTEM" ]]; then
        echo "Unsupported device : missing SUBSYSTEM"
        return 
    fi

    if [[ ! "$SUBSYSTEM" -eq "tty" ]]; then
        echo "Unsupported device : exepected SUBSYSTEM to be 'tty' but found '$SUBSYSTEM'"
        return 
    fi

    sed -i "s/TARGET_VID\=.*/TARGET_VID=\"$ID_VENDOR_ID\"/" "$BASE_DIR/conf"
    sed -i "s/TARGET_PID\=.*/TARGET_PID=\"$ID_MODEL_ID\"/" "$BASE_DIR/conf"
    sed -i "s/TARGET_SERIAL\=.*/TARGET_SERIAL=\"$ID_SERIAL\"/" "$BASE_DIR/conf"

    if (( $(udevadm info -ap $syspath | grep ATTRS{serial} | wc -l) >= $(udevadm info -ap $syspath | grep ATTRS{idProduct} | wc -l) )); then
         #because for some (cheap as mine) device the serial present in udevadmn info is fake and does not appears in udev attributes
        echo "SUBSYSTEM==\"tty\", ACTION==\"add\", ATTRS{idVendor}==\"$ID_VENDOR_ID\", ATTRS{idProduct}==\"$ID_MODEL_ID\", ATTRS{serial}==\"$ID_SERIAL\", MODE=\"0660\", GROUP=\"$UDEV_GROUP\"" > $UDEV_RULE
        #make pipe read only for user
    else
        echo "SUBSYSTEM==\"tty\", ACTION==\"add\", ATTRS{idVendor}==\"$ID_VENDOR_ID\", ATTRS{idProduct}==\"$ID_MODEL_ID\", MODE=\"0660\", GROUP=\"$UDEV_GROUP\"" > $UDEV_RULE
    fi

    udevadm control --reload-rules && udevadm trigger
}

function getDevice()
{
    local vid=$1
    local pid=$2
    local serial=$3

    for sysdevpath in $(find /sys/bus/usb/devices/usb*/ -name dev); do
        (
            syspath="${sysdevpath%/dev}"
            devname="$(udevadm info -q name -p $syspath)"
            [[ "$devname" == "bus/"* ]] && exit
            eval "$(udevadm info -q property --export -p $syspath)"
            [[ -z "$ID_SERIAL" ]] && exit
            [[ -z "$ID_VENDOR_ID" ]] && exit
            [[ -z "$ID_MODEL_ID" ]] && exit

            [[ "$ID_SERIAL" != "$serial" ]] && exit
            [[ "$ID_VENDOR_ID" != "$vid" ]] && exit
            [[ "$ID_MODEL_ID" != "$pid" ]] && exit


            #echo "/dev/$devname - $ID_SERIAL - $ID_VENDOR_ID - $ID_MODEL_ID"
            echo $syspath
        )
    done
}

function isDeviceConnected()
{
    local device_path=$1

    if [[ -e $device_path ]]; then
        echo "true"
    fi
}

function log()
{
    local type=$1
    local msg=$2
    local datetime=$(date "+%Y:%m:%d  %H:%M:%S:%N")
    
    echo "[$datetime] $msg" >> "$LOG_FILES_DIR/$type.log"
}

function executeScriptsInDir()
{
    local scripts_dir=$1
    local error=

    for f in "$scripts_dir"/* ; do #sort alphabetically in ascending order
        [[ ! -f "$f" ]] && continue;

        { # try
            error=$($f 2>&1 > /dev/null)
            
            if [[ ! -z $error ]]; then
                log "error" "$error"
            fi

        } || {
            log "error" "Non standard error in script $f"
        }
    done

}
